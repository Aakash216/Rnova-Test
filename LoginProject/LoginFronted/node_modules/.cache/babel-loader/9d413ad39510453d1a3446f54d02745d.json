{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aakash\\\\OneDrive\\\\Desktop\\\\LoginProject\\\\LoginProject\\\\LoginFronted\\\\src\\\\user\\\\userchart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport UserNavbar from \"../core/userNavbar\";\nimport axios from \"axios\";\nimport { Doughnut, Pie } from \"react-chartjs-2\";\nimport { Chart, ArcElement } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(ArcElement);\n/*function userchart()  {\n    this.pointClickHandler = this.pointClickHandler.bind(this);\n    this.legendClickHandler = this.legendClickHandler.bind(this)\n\n    return (\n      <div className=\"row\">\n         <div className=\"col-lg-12 col-md-12 col-sm-12\">\n      <UserNavbar/>\n        <div className = \"row\">\n            <div className= \"col-lg-6 col-md-6 col-sm-6 mt-5\">\n       <PieChart\n        id=\"\" style={{width:\"300px\", height: \"300px\"}}\n        dataSource={Loss}\n        palette=\"Material\"\n        title=\"Loss\"\n\n        onPointClick={this.pointClickHandler}\n        onLegendClick={this.legendClickHandler}\n      >\n        <Series\n          argumentField=\"country\"\n          valueField=\"area\"\n        >\n          <Label visible={false}>\n            <Connector visible={false} width={1} />\n          </Label>\n        </Series>\n\n        <Size width={500} />\n        <Export enabled={false} />\n      </PieChart>\n      </div>\n       <div className=\"col-lg-6 col-md-6 col-sm-6 mt-5\">\n<Chart\nid=\"chart\" style={{width:\"500px\", height: \"300px\",}}\ntitle=\"Growth\"\npalette=\"Material\"\nPalette Extension Mode=\"Alternate\"\ndataSource={Growth}>\n<CommonSeriesSettings\n  argumentField=\"number\"\n  valueField=\"age\"\n  type=\"bar\"\n  ignoreEmptyPoints={true}\n/>\n<SeriesTemplate nameField=\"age\" />\n<Title\n  \n/>\n</Chart>\n</div>\n</div>\n</div>\n</div>\n    );\n  }\n\n  pointClickHandler(e) {\n    this.toggleVisibility(e.target);\n  }\n\n  legendClickHandler(e) {\n    let arg = e.target;\n    let item = e.component.getAllSeries()[0].getPointsByArg(arg)[0];\n\n    this.toggleVisibility(item);\n  }\n\n  toggleVisibility(item) {\n    item.isVisible() ? item.hide() : item.show();\n  }\n\n\nexport default userchart;*/\n\nconst Userchart = () => {\n  _s();\n\n  const [graph, setGraph] = useState();\n  console.log(graph);\n  const pieData = {\n    maintainAspectRatio: false,\n    responsive: false,\n    labels: [\"usa\", \"europe\", \"africa\"],\n    datasets: [{\n      data: [200, 150, 20, 10],\n      backgroundColor: \"red\",\n      hoverBackgroundColor: \"green\"\n    }]\n  };\n  useEffect(() => {\n    if (localStorage.getItem(\"jwt\")) {\n      let userJwt = JSON.parse(localStorage.getItem(\"jwt\"));\n      let userId = userJwt.user._id;\n      axios(`${process.env.REACT_APP_BACKEND}/getGraphData?userId=${userId}`, {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        let arr = [];\n        response.data.graphData.growth.forEach(val => {\n          arr.push({\n            country: val.country,\n            number: val.number\n          });\n        });\n        setGraph(arr);\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Pie, {\n      data: pieData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 3\n  }, this);\n};\n\n_s(Userchart, \"8jJ0lsphP1F/qKWPM1abQCq7tcQ=\");\n\n_c = Userchart;\nexport default Userchart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Userchart\");","map":{"version":3,"sources":["C:/Users/Aakash/OneDrive/Desktop/LoginProject/LoginProject/LoginFronted/src/user/userchart.js"],"names":["React","useEffect","useState","UserNavbar","axios","Doughnut","Pie","Chart","ArcElement","register","Userchart","graph","setGraph","console","log","pieData","maintainAspectRatio","responsive","labels","datasets","data","backgroundColor","hoverBackgroundColor","localStorage","getItem","userJwt","JSON","parse","userId","user","_id","process","env","REACT_APP_BACKEND","method","headers","Accept","then","response","arr","graphData","growth","forEach","val","push","country","number"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,iBAA9B;AAEA,SAAQC,KAAR,EAAeC,UAAf,QAAgC,UAAhC;;AACAD,KAAK,CAACE,QAAN,CAAeD,UAAf;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAME,SAAS,GAAG,MAAK;AAAA;;AACrB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,EAAlC;AACDW,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEA,QAAMI,OAAO,GAAG;AACfC,IAAAA,mBAAmB,EAAE,KADN;AAEfC,IAAAA,UAAU,EAAE,KAFG;AAGfC,IAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,QAAR,EAAkB,QAAlB,CAHO;AAIfC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,IAAI,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,EAAX,EAAe,EAAf,CADR;AAEEC,MAAAA,eAAe,EAAE,KAFnB;AAGEC,MAAAA,oBAAoB,EAAE;AAHxB,KADQ;AAJK,GAAhB;AAaCrB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGsB,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAH,EAA+B;AAC/B,UAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAX,CAAd;AACA,UAAII,MAAM,GAAGH,OAAO,CAACI,IAAR,CAAaC,GAA1B;AACA1B,MAAAA,KAAK,CAAE,GAAE2B,OAAO,CAACC,GAAR,CAAYC,iBAAkB,wBAAuBL,MAAO,EAAhE,EAAmE;AACtEM,QAAAA,MAAM,EAAE,KAD8D;AAEtEC,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE,kBADD;AAEP,0BAAgB;AAFT;AAF6D,OAAnE,CAAL,CAOGC,IAPH,CAOQC,QAAQ,IAAI;AACnB,YAAIC,GAAG,GAAG,EAAV;AACAD,QAAAA,QAAQ,CAAClB,IAAT,CAAcoB,SAAd,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,GAAG,IAAI;AAC5CJ,UAAAA,GAAG,CAACK,IAAJ,CAAS;AACPC,YAAAA,OAAO,EAACF,GAAG,CAACE,OADL;AAEPC,YAAAA,MAAM,EAAEH,GAAG,CAACG;AAFL,WAAT;AAID,SALD;AAMAlC,QAAAA,QAAQ,CAAC2B,GAAD,CAAR;AACE,OAhBH;AAiBC;AACF,GAtBQ,EAsBP,EAtBO,CAAT;AAyBA,sBACA;AAAA,2BACI,QAAC,GAAD;AACM,MAAA,IAAI,EAAExB;AADZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADA;AAQC,CAlDH;;GAAML,S;;KAAAA,S;AAoDJ,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport UserNavbar from \"../core/userNavbar\";\nimport axios from \"axios\";\nimport { Doughnut, Pie } from \"react-chartjs-2\";\n\nimport {Chart, ArcElement} from 'chart.js'\nChart.register(ArcElement);\n\n\n\n\n\n/*function userchart()  {\n    this.pointClickHandler = this.pointClickHandler.bind(this);\n    this.legendClickHandler = this.legendClickHandler.bind(this)\n\n    return (\n      <div className=\"row\">\n         <div className=\"col-lg-12 col-md-12 col-sm-12\">\n      <UserNavbar/>\n        <div className = \"row\">\n            <div className= \"col-lg-6 col-md-6 col-sm-6 mt-5\">\n       <PieChart\n        id=\"\" style={{width:\"300px\", height: \"300px\"}}\n        dataSource={Loss}\n        palette=\"Material\"\n        title=\"Loss\"\n\n        onPointClick={this.pointClickHandler}\n        onLegendClick={this.legendClickHandler}\n      >\n        <Series\n          argumentField=\"country\"\n          valueField=\"area\"\n        >\n          <Label visible={false}>\n            <Connector visible={false} width={1} />\n          </Label>\n        </Series>\n\n        <Size width={500} />\n        <Export enabled={false} />\n      </PieChart>\n      </div>\n       <div className=\"col-lg-6 col-md-6 col-sm-6 mt-5\">\n<Chart\nid=\"chart\" style={{width:\"500px\", height: \"300px\",}}\ntitle=\"Growth\"\npalette=\"Material\"\nPalette Extension Mode=\"Alternate\"\ndataSource={Growth}>\n<CommonSeriesSettings\n  argumentField=\"number\"\n  valueField=\"age\"\n  type=\"bar\"\n  ignoreEmptyPoints={true}\n/>\n<SeriesTemplate nameField=\"age\" />\n<Title\n  \n/>\n</Chart>\n</div>\n</div>\n</div>\n</div>\n    );\n  }\n\n  pointClickHandler(e) {\n    this.toggleVisibility(e.target);\n  }\n\n  legendClickHandler(e) {\n    let arg = e.target;\n    let item = e.component.getAllSeries()[0].getPointsByArg(arg)[0];\n\n    this.toggleVisibility(item);\n  }\n\n  toggleVisibility(item) {\n    item.isVisible() ? item.hide() : item.show();\n  }\n\n\nexport default userchart;*/\n\nconst Userchart = ()=> {\n  const [graph, setGraph] = useState();\n console.log(graph);\n\n const pieData = {\n  maintainAspectRatio: false,\n  responsive: false,\n  labels: [\"usa\", \"europe\", \"africa\"],\n  datasets: [\n    {\n      data: [200, 150, 20, 10],\n      backgroundColor: \"red\",\n      hoverBackgroundColor: \"green\"\n    }\n  ]\n};\n\n  useEffect(() => {\n    if(localStorage.getItem(\"jwt\")){\n    let userJwt = JSON.parse(localStorage.getItem(\"jwt\"));\n    let userId = userJwt.user._id\n    axios(`${process.env.REACT_APP_BACKEND}/getGraphData?userId=${userId}`, {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n    })\n      .then(response => {\n     let arr = [];\n     response.data.graphData.growth.forEach(val => {\n       arr.push({\n         country:val.country,\n         number: val.number\n       })\n     })\n     setGraph(arr)\n      })\n    }\n  },[]);\n\n  \n  return (\n  <div>\n      <Pie\n            data={pieData}\n          />\n  </div>\n  )\n  \n  }\n\n  export default Userchart;"]},"metadata":{},"sourceType":"module"}